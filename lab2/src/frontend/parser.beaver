// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

// temporary declaration, you can remove this once you have written all other rules
%goal Dummy;

/* TODO: Flesh out the rule for Module, and add rules for other nonterminals. Here is an example
         of a rule you may want to add:
         
   Accessibility = PUBLIC
		  |
		  ;
  */

Module = MODULE ID LCURLY Imports Declarations RCURLY;

Imports = Import Imports
  |
  ;

Import = IMPORT ID SEMICOLON;

Declarations = Declaration Declarations
  |
  ;

Declaration = FunctionDeclaration
  | FieldDeclaration
  | TypeDeclaration
  ;

FunctionDeclaration = Accessibility TypeName ID LPAREN ParamList RPAREN LCURLY Statements RCURLY;

FieldDeclaration = Accessibility TypeName ID SEMICOLON ;
TypeDeclaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON;

Accessibility = PUBLIC
  |
  ;

Statements = Statement Statements
  |
  ;

Statement = VarDeclaration
  | BlockStatements
  | IfStatement
  | WhileStatement
  | BreakStatement
  | ReturnStatement
  | ExpressionStatement
  ;

VarDeclaration = TypeName ID SEMICOLON;

BlockStatements = LCURLY Statements RCURLY;

IfStatement = IF LPAREN Expression RPAREN OptionalElse;

OptionalElse = ELSE Statement
  |
  ;

WhileStatement = WHILE LPAREN Expression RPAREN Statement;

BreakStatement = BREAK SEMICOLON;

ReturnStatement = RETURN OptionalExpression SEMICOLON;

ExpressionStatement = Expression SEMICOLON;

OptionalExpression = Expression
  |
  ;

BaseType = PrimitiveType
  | ID
  ;

PrimitiveType = INT
  | BOOLEAN
  | VOID
  ;

TypeName = BaseType ArraySuffix ;

ArraySuffix = LBRACKET RBRACKET ArraySuffix
  |
  ;


Expression = MINUS;
ParamList = ;
/**/

/* Dummy rule to make the lexer compile. Remove this once you have written all other rules. */	  
Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT
           PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL;