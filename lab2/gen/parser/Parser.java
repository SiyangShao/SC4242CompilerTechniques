package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RPAREN = 9;
		static public final short RCURLY = 10;
		static public final short SEMICOLON = 11;
		static public final short INT = 12;
		static public final short BOOLEAN = 13;
		static public final short VOID = 14;
		static public final short LCURLY = 15;
		static public final short RBRACKET = 16;
		static public final short IF = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short COMMA = 21;
		static public final short EQL = 22;
		static public final short IMPORT = 23;
		static public final short PUBLIC = 24;
		static public final short PLUS = 25;
		static public final short TIMES = 26;
		static public final short DIV = 27;
		static public final short MOD = 28;
		static public final short TYPE = 29;
		static public final short MODULE = 30;
		static public final short ELSE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDLdbKL5KO$xqtBisGWXceBMQaA0ag88WRYBW12eA8#vPb1fQbgRc4PaAPPgLfSVgdEcN" +
		"QOcMMxVjYqKwhMbQsQYLgccdwzPixTvwFDpCinpgdcVExt$QxzxlptZVtVe2v2XFG2uCm15" +
		"d8nHZqnIoaeYVEmrnSZJc8GckqmLau6#VWNBJ5cGtajseW$u8w#B4EVktik0Qn4npiQp4HK" +
		"p40sSZ1K0n3Owd6xRWEIt4zej4F7H2FH7GFuAL9jMomU4KXUMjhh6U6v8t5E8pty#I##l7W" +
		"2iMJdIX5liLhPF6SJwU7UZfERs5GxnJbpNDaUX390SoEYbaGuE#g$9C2$7s2vXiLr7jnKE#" +
		"bjNWTEyOqvClN0Tu966pDpS3YW7XTTacjAuv1Efhh6Yn6fYqo0vVZ2ip4bRYgmJbFrMw6TN" +
		"AKTTm44JWDJMbx48RJuSRDj8kmHjlBzSu7djotV8LvSWmhh5W9LeYW9JtBV7Kd7w657DKrw" +
		"1l3SODyW69Y5Sx06gd20ZzGZaYKisvNeftiHsV4u7oqnuNeX2xeZMxyB$P74b9a5uPZ14RA" +
		"GnXDpqMOZ4la0RxJ8ap7PPWjNyZdk0RpvLCin2BvXEmbyXdASADyB1$Y9jp2TtihLcCTRiC" +
		"Tk9DvEZ97B3DrvbaIpsnTcIs1$vOa$b#IaQB$8xsuYpwigVyN$xza6polN3mx6hC#ch8U1h" +
		"0Q1h4Qch6Im$diM$0TjkHjuUJbaHTXyI93ycgkrpOaptTQ#taZwiapGl9yjfyNRl62Fvs6U" +
		"9sPtAo#uCpy4Fw2Vs4Nfx9ZhnKMuAqvDoB44mrjDwfZnNYh1jlKYBJZ6H3DVg4zxw#6vZnL" +
		"EuDzZOTlS22zWwbbw5Dp89$FO5PrQstxTsxVjtSj3qT$pFlxeMfoYAuxDqzVZzPzepVcvkz" +
		"tioznStNl6dv4aXkfBGzx6Uyxyl3kS5EBujYVDqgO#gRJwgUGIKHGYr3p8nZnlbU3Mferfg" +
		"inYrytlxve57cj#1GCIg1Y2THdFR6Ns0yOXm6p4U4ckXD9HBINvmVjE2AJQ4ua4Xb430ChA" +
		"RFqcdTJpxNFSuBn8cAuvc#XNg3zexYF2igHDBPHzjASdJe#dl5xA4VJgDQ#CJvfb58VgttZ" +
		"RBco6TkeEPk8pVHreQoYOolb3XtRNTkUQ#xVADEo0zUQfFCq8QRGn#TfJj3xhWmozo3Z4tN" +
		"yBkgJwJj6EKsluoAc4ZFhjnUpMCivn5mYbfXEv13pYH9Y6B68f2FCjPnw7h7OiKvVOW6HJA" +
		"GJ2ubbEbP8pDDw6J6BA2TARVDdQxc2M7hIZpARdi$ybITjeoh8yrbjq$VvTH7PRjCFrEVPs" +
		"F9w73aysX$DlOPhlQSj7gLzmnthx0gTmuZMdB7KrtBTTfGpjBnNSqxKVyzc9xtU7filLgyJ" +
		"JxsptUVOvo7Rd7Wz9zMsrqmTIwxlVaBiiRTDJzEIjMFaUi#68FnKdVyuzPxEUDtvC3#8hmB" +
		"w8yVbW98SvIyv8d$2yP73QjmdlyjlyglibJtoY$ByhCQVBDxtyYF77onxD$6TqhubtfDtXQ" +
		"UMLCfR7DyaNYIU8vwI9sMBF26RvN5vJ1wLJVA8R9DtrCo7zLeRPAEy9C$8qx9LdbMUzLQU#" +
		"zMuJTwM5#HvUKDUbzVaLNb5NgRt6#UlyJArt27RvSiQaVVLUCYo$v23V3udbFutXt7ik9gm" +
		"LpC9i5zpyGOq2V0MD2nay$x8uJqtbDmCsZplsSkQ1DXN6Y6HmlLw4AcSbqi#wu7zPsDse2P" +
		"xK1UxK9Czb460DwcXa6X3WeRtZlKYZNFIo1t6UJpBUBEv2F1kDTdn60fTwUj8Evryrg3gWh" +
		"hHbqSP3F4ABjwoXa8SzJZAJ1jYk5uCPQSw4CkS#UJoVEFzx2B0dizar#1Yt#12uJ$AR7IG");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [1] Imports = Import Imports; returns 'Imports' although none is marked
			Action.NONE,  	// [2] Imports = 
			RETURN3,	// [3] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [4] Declarations = Declaration Declarations; returns 'Declarations' although none is marked
			Action.NONE,  	// [5] Declarations = 
			Action.RETURN,	// [6] Declaration = FunctionDeclaration
			Action.RETURN,	// [7] Declaration = FieldDeclaration
			Action.RETURN,	// [8] Declaration = TypeDeclaration
			RETURN9,	// [9] FunctionDeclaration = Accessibility TypeName ID LPAREN ParamList RPAREN LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [10] FieldDeclaration = Accessibility TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [11] TypeDeclaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [12] Accessibility = PUBLIC
			Action.NONE,  	// [13] Accessibility = 
			RETURN2,	// [14] Statements = Statement Statements; returns 'Statements' although none is marked
			Action.NONE,  	// [15] Statements = 
			Action.RETURN,	// [16] Statement = VarDeclaration
			Action.RETURN,	// [17] Statement = BlockStatements
			Action.RETURN,	// [18] Statement = IfStatement
			Action.RETURN,	// [19] Statement = WhileStatement
			Action.RETURN,	// [20] Statement = BreakStatement
			Action.RETURN,	// [21] Statement = ReturnStatement
			Action.RETURN,	// [22] Statement = ExpressionStatement
			RETURN3,	// [23] VarDeclaration = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [24] BlockStatements = LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN6,	// [25] IfStatement = IF LPAREN Expression RPAREN Statement OptionalElse; returns 'OptionalElse' although none is marked
			RETURN2,	// [26] OptionalElse = ELSE Statement; returns 'Statement' although none is marked
			Action.NONE,  	// [27] OptionalElse = 
			RETURN5,	// [28] WhileStatement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [29] BreakStatement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [30] ReturnStatement = RETURN OptionalExpression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [31] ExpressionStatement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [32] OptionalExpression = Expression
			Action.NONE,  	// [33] OptionalExpression = 
			Action.RETURN,	// [34] BaseType = PrimitiveType
			Action.RETURN,	// [35] BaseType = ID
			Action.RETURN,	// [36] PrimitiveType = INT
			Action.RETURN,	// [37] PrimitiveType = BOOLEAN
			Action.RETURN,	// [38] PrimitiveType = VOID
			Action.RETURN,	// [39] TypeName = BaseType
			Action.RETURN,	// [40] TypeName = ArrayType
			RETURN4,	// [41] ArrayType = ID LBRACKET RBRACKET ArraySuffix; returns 'ArraySuffix' although none is marked
			RETURN4,	// [42] ArrayType = PrimitiveType LBRACKET RBRACKET ArraySuffix; returns 'ArraySuffix' although none is marked
			RETURN3,	// [43] ArraySuffix = LBRACKET RBRACKET ArraySuffix; returns 'ArraySuffix' although none is marked
			Action.NONE,  	// [44] ArraySuffix = 
			RETURN2,	// [45] ParamList = Parameter ParamListTail; returns 'ParamListTail' although none is marked
			Action.NONE,  	// [46] ParamList = 
			RETURN3,	// [47] ParamListTail = COMMA Parameter ParamListTail; returns 'ParamListTail' although none is marked
			Action.NONE,  	// [48] ParamListTail = 
			RETURN2,	// [49] Parameter = TypeName ID; returns 'ID' although none is marked
			Action.RETURN,	// [50] Expression = Assignment
			Action.RETURN,	// [51] Expression = RHSExpression
			RETURN3,	// [52] Assignment = LHSExpression EQL Expression; returns 'Expression' although none is marked
			RETURN2,	// [53] LHSExpression = ID ArrayAccess; returns 'ArrayAccess' although none is marked
			RETURN4,	// [54] ArrayAccess = LBRACKET Expression RBRACKET ArrayAccess; returns 'ArrayAccess' although none is marked
			Action.NONE,  	// [55] ArrayAccess = 
			Action.RETURN,	// [56] RHSExpression = ArithmeticExpression
			RETURN3,	// [57] RHSExpression = ArithmeticExpression ComparisonOperator ArithmeticExpression; returns 'ArithmeticExpression' although none is marked
			Action.RETURN,	// [58] ComparisonOperator = EQEQ
			Action.RETURN,	// [59] ComparisonOperator = NEQ
			Action.RETURN,	// [60] ComparisonOperator = LT
			Action.RETURN,	// [61] ComparisonOperator = LEQ
			Action.RETURN,	// [62] ComparisonOperator = GT
			Action.RETURN,	// [63] ComparisonOperator = GEQ
			new Action() {	// [64] ArithmeticExpression = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [65] ArithmeticExpression = ArithmeticExpression AdditiveOperator Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			Action.RETURN,	// [66] AdditiveOperator = PLUS
			Action.RETURN,	// [67] AdditiveOperator = MINUS
			new Action() {	// [68] Term = Term MultiplicativeOperator Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [69] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [70] MultiplicativeOperator = TIMES
			Action.RETURN,	// [71] MultiplicativeOperator = DIV
			Action.RETURN,	// [72] MultiplicativeOperator = MOD
			RETURN2,	// [73] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [74] Factor = PrimaryExpression
			Action.RETURN,	// [75] PrimaryExpression = LHSExpression
			Action.RETURN,	// [76] PrimaryExpression = FunctionCall
			Action.RETURN,	// [77] PrimaryExpression = ArrayExpression
			Action.RETURN,	// [78] PrimaryExpression = STRING_LITERAL
			Action.RETURN,	// [79] PrimaryExpression = INT_LITERAL
			Action.RETURN,	// [80] PrimaryExpression = TRUE
			Action.RETURN,	// [81] PrimaryExpression = FALSE
			Action.RETURN,	// [82] PrimaryExpression = ParenthesisedExpression
			RETURN4,	// [83] FunctionCall = ID LPAREN ArgumentList RPAREN; returns 'RPAREN' although none is marked
			RETURN2,	// [84] ArgumentList = Expression ArgumentListTail; returns 'ArgumentListTail' although none is marked
			Action.NONE,  	// [85] ArgumentList = 
			RETURN3,	// [86] ArgumentListTail = COMMA Expression ArgumentListTail; returns 'ArgumentListTail' although none is marked
			Action.NONE,  	// [87] ArgumentListTail = 
			RETURN2,	// [88] NonEmptyArgumentList = Expression ArgumentListTail; returns 'ArgumentListTail' although none is marked
			RETURN3,	// [89] ArrayExpression = LBRACKET NonEmptyArgumentList RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3	// [90] ParenthesisedExpression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
