package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short MODULE = 1;
		static public final short ID = 2;
		static public final short RCURLY = 3;
		static public final short LCURLY = 4;
		static public final short INT = 5;
		static public final short VOID = 6;
		static public final short IF = 7;
		static public final short ELSE = 8;
		static public final short WHILE = 9;
		static public final short RETURN = 10;
		static public final short BREAK = 11;
		static public final short BOOLEAN = 12;
		static public final short PUBLIC = 13;
		static public final short TRUE = 14;
		static public final short FALSE = 15;
		static public final short INT_LITERAL = 16;
		static public final short STRING_LITERAL = 17;
		static public final short TYPE = 18;
		static public final short IMPORT = 19;
		static public final short PLUS = 20;
		static public final short MINUS = 21;
		static public final short TIMES = 22;
		static public final short DIV = 23;
		static public final short MOD = 24;
		static public final short EQEQ = 25;
		static public final short NEQ = 26;
		static public final short LEQ = 27;
		static public final short GEQ = 28;
		static public final short LT = 29;
		static public final short GT = 30;
		static public final short LBRACKET = 31;
		static public final short RPAREN = 32;
		static public final short COMMA = 33;
		static public final short SEMICOLON = 34;
		static public final short RBRACKET = 35;
		static public final short LPAREN = 36;
		static public final short EQL = 37;
	}
	static public class AltGoals {
		static public final short Dummy = 38;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pLaGTE0p4K1OTiUYMz1q926kKGd8np8d4CEiJCEiiX#DBpUvOjU$mDF70W5qBuea0#72b" +
		"HeKY35cKwzEbIPKoD6NKkMD9amuvpeCqwV7DDZvlmmu1R4eRSCMBgweHJpTKYfiiuNgbLJ5" +
		"l#QizPdAM#qulUNV2#fZHj2N8o3UMOo36Nek4fQreXo96uFozfJk#PDZ8dqenT7OLOJDKif" +
		"aKSBzKofbN8odV0$QD3d17FIo9BUZwI8TEfIggiAcuzwbNzHw#fklbRRwXcx2lsCkqMT9n$" +
		"wbrrRlw8pD0tl#i3$KqVgb7MGzd3g#vxmei#o$fvaNLqdVOqutxA$3dr$w2iyl7dz$PyQzx" +
		"v5uTVn2A0hW==");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN37 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 37];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = Module
			RETURN2,	// [1] $goal = $Dummy Dummy; returns 'Dummy' although none is marked
			RETURN4,	// [2] Module = MODULE ID LCURLY RCURLY; returns 'RCURLY' although none is marked
			RETURN37	// [3] Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL; returns 'EQL' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
