package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RPAREN = 9;
		static public final short RCURLY = 10;
		static public final short SEMICOLON = 11;
		static public final short RBRACKET = 12;
		static public final short INT = 13;
		static public final short BOOLEAN = 14;
		static public final short VOID = 15;
		static public final short LCURLY = 16;
		static public final short IF = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short COMMA = 21;
		static public final short EQL = 22;
		static public final short IMPORT = 23;
		static public final short PUBLIC = 24;
		static public final short EQEQ = 25;
		static public final short NEQ = 26;
		static public final short LT = 27;
		static public final short LEQ = 28;
		static public final short GT = 29;
		static public final short GEQ = 30;
		static public final short PLUS = 31;
		static public final short TIMES = 32;
		static public final short DIV = 33;
		static public final short MOD = 34;
		static public final short TYPE = 35;
		static public final short MODULE = 36;
		static public final short ELSE = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDLsbOLKKOVi#zGDmB6PcWQAQY0Y828eY0R2hbWgoI5YXfBfLPcT5cfPKj5bcPPVayFVq" +
		"eesmnmxB5D2lAR2yhiyrAArDBQJDRljupTouTphrmkK$zYFEyyttppZlpVMTcpim5SCn73R" +
		"8n1YVY99HWCaPY0R8m0drm4Ufn8MBG0x7eYLuu7hrn0he5gUyUfBv$0FrWcxvZTPfDVGLgC" +
		"HsZC1RZC1uJ42e7SJiSk0fNOmdYC13968fXTftSIzrCb0NImIa7vLDS753NHUSNI7S6yf2F" +
		"41#T$Qs7gxUsivL#sJh5JhIzuODOYGmVROBIbllmAOgVwiFd#erOxPUTuPUTrG5hp$azB9J" +
		"Fx2ocu1ISYiK#VA3wsG4Ldf6FmZoSWtDn7kRZVCmDEawmzHeKM#RYJEPfPGfmWzvBHHQsGK" +
		"GQRNaUZKbw7rs3CBQ6apaMRaGW4dV0nUyW70tKU9ZHrj5qFnr9tk6#F8lxKh7o2HQXJ8x84" +
		"KIPAuARrRhyBczX6QvdUGnMO0LLDw4h#k8uN8T#Y6OPBuSm08b8mY0CGIeAKOfqPChdg42L" +
		"hC79o24t3QV9$JYTUStc5pW75yWE#H2Nu59v7vVXSjdENbVA1xWMI#LTUHituXOinwrS$vM" +
		"u3NS2k0lntCU9Z9B4qoEPiL8OBOtVKJg$f0nawgydc$5okTVo$cVwuDG6JpCdJunGX76dXd" +
		"C5tTn90xZMNRWIKLpnhbo3RZuwSzrD9f3EeCxa0kcy#GNIZU9E6yDskyx$MmV3sYEvU1TLj" +
		"AEjR8Ul#W$o#3Svc$K87xOllw0uVgF#r1tLGm8gF2ExszoPVOAE4spTFXSXDiQxbwoimIyx" +
		"qfPd4SyLppuQptFBnVEpY7Ts2K$KKdMIcIUgGOs7QJkQfvytaallIm$hoTVDnwdy$gfqKnN" +
		"1I2xMUl0nETEFOeG8jaRhFYxUskNqNJnH2zXYFYwUR2PYo4NIHh8MpTAX50QVI9wlth90bH" +
		"Fuk5G4WpCNmxRkfbQ49R1gCTJVL68riOKu03XY0MCPiOz#JwAVgVE2zL0YbOWZeeXa8e4Dz" +
		"RHfUiobz8TP#zd1zamYHUllff#X#Mp6daixdEYbszVfjWAsBQ3DOQLPSxaUQqoYFr9pUPOu" +
		"MMnRg3MBjLr2Z2KQTFsUZd9jcpUMQtk4OnVg$YtqHz4sqkPhhjwthx6MxQErluj#CUq6sd6" +
		"QsqoVUJcgTFqLOdldydAKQ3kPc4B7pAMK$MjfQuWAOY0nZUX3leusaPXk6wS$mJx6NjfuWl" +
		"l3CLktfHDrsfz3c7C#avXXwL#jxJnYbcNUyYt#28xVP9cNZNxcUQbrthm#VwNijFWjdPaRo" +
		"vXkMtsN7l#GhiTPslPhcsthixw3yGzhwzrNJOGGctHzJ#TpTOJfiJPREBSUnqa$KdCkFtbi" +
		"i$I9qdsw$CCPiRgjkwwl8NPqDhTsykrjyVjgsu$Z3Z3tb1zz3nrxjtdc11$FxvvP1VqdVqg" +
		"BiYpbDpailyBs9x#eyWVvNWx8VjadtybUnNohoc#qQhTypN9FQw#lY2#LzmNnXhmkN6DvJP" +
		"g5tweyHpn3F27hfKaUbtNocAoLH#KHULYsoZRLxo4zKgCy89laATaWJyhJYbdT6kK#LMwLL" +
		"rasoykoKPwLb#H5UK6soFF2Kq9ssT$7r6lxiUoKZzgqlAdAdrlhFycFdA6$bFy7Yrh#cWlZ" +
		"ZUSWm5lFoRlFGK3TVrwKy2wPoBksbDeYrelOdaTT7cqcw#rXECVB8aRm5YgdlfpwRFevz7F" +
		"9ZwIje8ud5EzIGo7TWg4Q6Onj8fzzygajOxyoMluNJO0tguE$YWo5L789wdOC8S1VIWxUpq" +
		"u2lAaDlnYYuEGjRYWaqq#cBROWdkF4qoO6m236hQIsal4AEKuXRHNhIVG74zL$0$UuQuG=");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [1] Imports = Import Imports; returns 'Imports' although none is marked
			Action.NONE,  	// [2] Imports = 
			RETURN3,	// [3] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [4] Declarations = Declaration Declarations; returns 'Declarations' although none is marked
			Action.NONE,  	// [5] Declarations = 
			Action.RETURN,	// [6] Declaration = FunctionDeclaration
			Action.RETURN,	// [7] Declaration = FieldDeclaration
			Action.RETURN,	// [8] Declaration = TypeDeclaration
			RETURN9,	// [9] FunctionDeclaration = Accessibility TypeName ID LPAREN ParamList RPAREN LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [10] FieldDeclaration = Accessibility TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [11] TypeDeclaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [12] Accessibility = PUBLIC
			Action.NONE,  	// [13] Accessibility = 
			RETURN2,	// [14] Statements = Statement Statements; returns 'Statements' although none is marked
			Action.NONE,  	// [15] Statements = 
			Action.RETURN,	// [16] Statement = VarDeclaration
			Action.RETURN,	// [17] Statement = BlockStatements
			Action.RETURN,	// [18] Statement = IfStatement
			Action.RETURN,	// [19] Statement = WhileStatement
			Action.RETURN,	// [20] Statement = BreakStatement
			Action.RETURN,	// [21] Statement = ReturnStatement
			Action.RETURN,	// [22] Statement = ExpressionStatement
			RETURN3,	// [23] VarDeclaration = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [24] BlockStatements = LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN5,	// [25] IfStatement = IF LPAREN Expression RPAREN OptionalElse; returns 'OptionalElse' although none is marked
			RETURN2,	// [26] OptionalElse = ELSE Statement; returns 'Statement' although none is marked
			Action.NONE,  	// [27] OptionalElse = 
			RETURN5,	// [28] WhileStatement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [29] BreakStatement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [30] ReturnStatement = RETURN OptionalExpression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [31] ExpressionStatement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [32] OptionalExpression = Expression
			Action.NONE,  	// [33] OptionalExpression = 
			Action.RETURN,	// [34] BaseType = PrimitiveType
			Action.RETURN,	// [35] BaseType = ID
			Action.RETURN,	// [36] PrimitiveType = INT
			Action.RETURN,	// [37] PrimitiveType = BOOLEAN
			Action.RETURN,	// [38] PrimitiveType = VOID
			Action.RETURN,	// [39] TypeName = BaseType
			Action.RETURN,	// [40] TypeName = ArrayType
			RETURN4,	// [41] ArrayType = ID LBRACKET RBRACKET ArraySuffix; returns 'ArraySuffix' although none is marked
			RETURN4,	// [42] ArrayType = PrimitiveType LBRACKET RBRACKET ArraySuffix; returns 'ArraySuffix' although none is marked
			RETURN3,	// [43] ArraySuffix = LBRACKET RBRACKET ArraySuffix; returns 'ArraySuffix' although none is marked
			Action.NONE,  	// [44] ArraySuffix = 
			RETURN2,	// [45] ParamList = Parameter ParamListTail; returns 'ParamListTail' although none is marked
			Action.NONE,  	// [46] ParamList = 
			RETURN3,	// [47] ParamListTail = COMMA Parameter ParamListTail; returns 'ParamListTail' although none is marked
			Action.NONE,  	// [48] ParamListTail = 
			RETURN2,	// [49] Parameter = TypeName ID; returns 'ID' although none is marked
			Action.RETURN,	// [50] Expression = Assignment
			Action.RETURN,	// [51] Expression = RHSExpression
			RETURN3,	// [52] Assignment = LHSExpression EQL Expression; returns 'Expression' although none is marked
			RETURN2,	// [53] LHSExpression = ID ArrayAccess; returns 'ArrayAccess' although none is marked
			RETURN4,	// [54] ArrayAccess = LBRACKET Expression RBRACKET ArrayAccess; returns 'ArrayAccess' although none is marked
			Action.NONE,  	// [55] ArrayAccess = 
			RETURN2,	// [56] RHSExpression = ArithmeticExpression ComparisonExpressionTail; returns 'ComparisonExpressionTail' although none is marked
			RETURN3,	// [57] ComparisonExpressionTail = ComparisonOperator ArithmeticExpression ComparisonExpressionTail; returns 'ComparisonExpressionTail' although none is marked
			Action.NONE,  	// [58] ComparisonExpressionTail = 
			Action.RETURN,	// [59] ComparisonOperator = EQEQ
			Action.RETURN,	// [60] ComparisonOperator = NEQ
			Action.RETURN,	// [61] ComparisonOperator = LT
			Action.RETURN,	// [62] ComparisonOperator = LEQ
			Action.RETURN,	// [63] ComparisonOperator = GT
			Action.RETURN,	// [64] ComparisonOperator = GEQ
			new Action() {	// [65] ArithmeticExpression = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [66] ArithmeticExpression = ArithmeticExpression AdditiveOperator Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			Action.RETURN,	// [67] AdditiveOperator = PLUS
			Action.RETURN,	// [68] AdditiveOperator = MINUS
			new Action() {	// [69] Term = Term MultiplicativeOperator Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [70] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [71] MultiplicativeOperator = TIMES
			Action.RETURN,	// [72] MultiplicativeOperator = DIV
			Action.RETURN,	// [73] MultiplicativeOperator = MOD
			RETURN2,	// [74] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [75] Factor = PrimaryExpression
			Action.RETURN,	// [76] PrimaryExpression = LHSExpression
			Action.RETURN,	// [77] PrimaryExpression = FunctionCall
			Action.RETURN,	// [78] PrimaryExpression = ArrayExpression
			Action.RETURN,	// [79] PrimaryExpression = STRING_LITERAL
			Action.RETURN,	// [80] PrimaryExpression = INT_LITERAL
			Action.RETURN,	// [81] PrimaryExpression = TRUE
			Action.RETURN,	// [82] PrimaryExpression = FALSE
			Action.RETURN,	// [83] PrimaryExpression = ParenthesisedExpression
			RETURN4,	// [84] FunctionCall = ID LPAREN ArgumentList RPAREN; returns 'RPAREN' although none is marked
			RETURN2,	// [85] ArgumentList = Expression ArgumentListTail; returns 'ArgumentListTail' although none is marked
			Action.NONE,  	// [86] ArgumentList = 
			RETURN3,	// [87] ArgumentListTail = COMMA Expression ArgumentListTail; returns 'ArgumentListTail' although none is marked
			Action.NONE,  	// [88] ArgumentListTail = 
			RETURN2,	// [89] NonEmptyArgumentList = Expression ArgumentListTail; returns 'ArgumentListTail' although none is marked
			RETURN3,	// [90] ArrayExpression = LBRACKET NonEmptyArgumentList RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3	// [91] ParenthesisedExpression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
